---

  name: Close Release

  permissions:
    contents: write

  on:
    workflow_dispatch:
      inputs:
        dry_run:
          description: "Dry run (do not push tag or create release)"
          required: false
          default: "false"
        prerelease:
          description: "Mark release as pre-release"
          required: false
          default: "false"

  jobs:
    close-release:
      runs-on: ubuntu-latest

      steps:
        - name: Harden the runner (Audit all outbound calls)
          uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
          with:
            egress-policy: audit

        - name: Checkout repo
          uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
          with:
            fetch-depth: 0

        - name: Read release version
          id: get_version
          run: |
            if [ ! -f RELEASE_VERSION.txt ]; then
              echo "RELEASE_VERSION.txt not found!" && exit 1
            fi
            VERSION=$(cat RELEASE_VERSION.txt | tr -d ' \n')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Release version: $VERSION"

        - name: Validate version format
          run: |
            VERSION="${{ steps.get_version.outputs.version }}"
            if ! [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "ERROR: Version must match vMAJOR.MINOR.PATCH (e.g., v1.2.3)"
              exit 1
            fi

        - name: Ensure tag does not already exist
          run: |
            VERSION="${{ steps.get_version.outputs.version }}"
            if git rev-parse "$VERSION" >/dev/null 2>&1; then
              echo "ERROR: Tag $VERSION already exists!"
              exit 1
            fi

        - name: Create Git tag
          if: ${{ github.event.inputs.dry_run != 'true' }}
          run: |
            VERSION="${{ steps.get_version.outputs.version }}"
            git config user.name "github-actions"
            git config user.email "actions@github.com"
            git tag "$VERSION"
            git push origin "$VERSION"

        # after "Create Git tag" and before "Create GitHub release"
        - name: Find previous tag
          id: prev
          run: |
            VERSION="${{ steps.get_version.outputs.version }}"
            # previous reachable tag (if none, leave empty)
            PREV=$(git describe --tags --abbrev=0 "${VERSION}^" 2>/dev/null || true)
            echo "prev_tag=$PREV" >> "$GITHUB_OUTPUT"

        - name: Create GitHub release
          if: ${{ github.event.inputs.dry_run != 'true' }}
          uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
          with:
            tag_name: ${{ steps.get_version.outputs.version }}
            name: Release ${{ steps.get_version.outputs.version }}
            # This should ensure my custom intro to appear first
            body: |
              Release ${{ steps.get_version.outputs.version }}

              **Full Changelog**:
              https://github.com/${{ github.repository }}/compare/${{ steps.prev.outputs.prev_tag }}...${{ steps.get_version.outputs.version }}
            # GitHub should append the auto notes based on release.yml here
            generate_release_notes: true
            prerelease: ${{ github.event.inputs.prerelease }}
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        - name: Publish module version to Go proxy (curl only)
          if: ${{ github.event.inputs.dry_run != 'true' }}
          run: |
            set -euxo pipefail
            VERSION="${{ steps.get_version.outputs.version }}"
            MODULE="github.com/pzaino/thecrowler"
            curl -fsS "https://proxy.golang.org/${MODULE}/@v/${VERSION}.info" >/dev/null
            curl -fsS "https://pkg.go.dev/${MODULE}@${VERSION}" >/dev/null || true

        - name: Dry run notice
          if: ${{ github.event.inputs.dry_run == 'true' }}
          run: |
            echo "[DRY RUN] Would have created Git tag and GitHub release for version ${{ steps.get_version.outputs.version }}"

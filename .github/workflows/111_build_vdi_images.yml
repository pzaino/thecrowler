---
name: Build & Push VDI (Chromium)

permissions:
  contents: read
  packages: write

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Tag for Docker image (e.g., v1.5.0)"
        required: true
      selenium_version:
        description: "Selenium version (default 4.28.1)"
        required: false
        default: "4.28.1"
      selenium_build_id:
        description: "Selenium build id (default 20250202)"
        required: false
        default: "20250202"
      push_latest:
        description: "Also update :latest multi-arch tag?"
        required: false
        default: "true"
      dry_run:
        description: "Dry run (do not push)"
        required: false
        default: "false"

env:
  REGISTRY: docker.io
  IMAGE_OWNER: zfpsystems
  IMAGE_NAME: crowler-vdi

jobs:
  build:
    name: Build ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Harden the runner (audit)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392

      - name: Set up Docker Buildx (use docker driver)
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435
        with:
            driver: docker
            install: true

      - name: Log in to Docker Hub
        if: ${{ github.event.inputs.dry_run != 'true' }}
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Ensure script exists
        run: |
          test -x scripts/build-vdi.sh || { echo "scripts/build-vdi.sh missing or not executable"; exit 1; }

      - name: Build Selenium VDI (Chromium) for ${{ matrix.arch }}
        env:
          # Force cross-platform build without editing the Makefiles:
          DOCKER_DEFAULT_PLATFORM: linux/${{ matrix.arch }}${{ matrix.arch == 'arm64' && '/v8' || '' }}
          FORCE_CHROMIUM: "true"
          SKIP_COMPOSE: "true"
          SELENIUM_VER_NUM: ${{ github.event.inputs.selenium_version }}
          SELENIUM_BUILDID: ${{ github.event.inputs.selenium_build_id }}
        run: |
          scripts/build-vdi.sh
          echo "Listing built selenium images:"
          docker images 'selenium/standalone-*' --format '{{.Repository}}:{{.Tag}} ({{.ID}})'

      - name: Retag as ${{ env.IMAGE_NAME }}:${{ github.event.inputs.release_tag }}-${{ matrix.arch }}
        run: |
          # Pick the chromium build first; fallback to chrome (unlikely).
          IMG=$(docker images --format '{{.Repository}}:{{.Tag}}' selenium/standalone-chromium | head -n1)
          if [ -z "$IMG" ]; then
            IMG=$(docker images --format '{{.Repository}}:{{.Tag}}' selenium/standalone-chrome | head -n1)
          fi
          if [ -z "$IMG" ]; then
            echo "ERROR: No built selenium standalone image found"; exit 1
          fi
          echo "Using source image: $IMG"
          TARGET="${REGISTRY}/${IMAGE_OWNER}/${IMAGE_NAME}:${{ github.event.inputs.release_tag }}-${{ matrix.arch }}"
          docker tag "$IMG" "$TARGET"
          docker images "$TARGET"

      - name: Push arch image
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          docker push "${REGISTRY}/${IMAGE_OWNER}/${IMAGE_NAME}:${{ github.event.inputs.release_tag }}-${{ matrix.arch }}"

  publish:
    name: Publish multi-arch manifest
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.dry_run != 'true' }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: Log in to Docker Hub
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create and push manifest for ${{ github.event.inputs.release_tag }}
        run: |
          BASE="${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}"
          docker buildx imagetools create \
            -t "${BASE}:${{ github.event.inputs.release_tag }}" \
            "${BASE}:${{ github.event.inputs.release_tag }}-amd64" \
            "${BASE}:${{ github.event.inputs.release_tag }}-arm64"

      - name: Also update :latest (optional)
        if: ${{ github.event.inputs.push_latest == 'true' }}
        run: |
          BASE="${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}"
          docker buildx imagetools create \
            -t "${BASE}:latest" \
            "${BASE}:${{ github.event.inputs.release_tag }}-amd64" \
            "${BASE}:${{ github.event.inputs.release_tag }}-arm64"
